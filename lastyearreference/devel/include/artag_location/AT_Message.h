// Generated by gencpp from file artag_location/AT_Message.msg
// DO NOT EDIT!


#ifndef ARTAG_LOCATION_MESSAGE_AT_MESSAGE_H
#define ARTAG_LOCATION_MESSAGE_AT_MESSAGE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace artag_location
{
template <class ContainerAllocator>
struct AT_Message_
{
  typedef AT_Message_<ContainerAllocator> Type;

  AT_Message_()
    : tran_x(0.0)
    , tran_y(0.0)
    , reached()  {
    }
  AT_Message_(const ContainerAllocator& _alloc)
    : tran_x(0.0)
    , tran_y(0.0)
    , reached(_alloc)  {
  (void)_alloc;
    }



   typedef double _tran_x_type;
  _tran_x_type tran_x;

   typedef double _tran_y_type;
  _tran_y_type tran_y;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _reached_type;
  _reached_type reached;




  typedef boost::shared_ptr< ::artag_location::AT_Message_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::artag_location::AT_Message_<ContainerAllocator> const> ConstPtr;

}; // struct AT_Message_

typedef ::artag_location::AT_Message_<std::allocator<void> > AT_Message;

typedef boost::shared_ptr< ::artag_location::AT_Message > AT_MessagePtr;
typedef boost::shared_ptr< ::artag_location::AT_Message const> AT_MessageConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::artag_location::AT_Message_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::artag_location::AT_Message_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace artag_location

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'artag_location': ['/home/cc/ee106a/fa17/class/ee106a-aau/ros_workspaces/final_project/src/artag_location/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::artag_location::AT_Message_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::artag_location::AT_Message_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::artag_location::AT_Message_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::artag_location::AT_Message_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::artag_location::AT_Message_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::artag_location::AT_Message_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::artag_location::AT_Message_<ContainerAllocator> >
{
  static const char* value()
  {
    return "feb690295f73f6492a4c2be8cafaaeec";
  }

  static const char* value(const ::artag_location::AT_Message_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfeb690295f73f649ULL;
  static const uint64_t static_value2 = 0x2a4c2be8cafaaeecULL;
};

template<class ContainerAllocator>
struct DataType< ::artag_location::AT_Message_<ContainerAllocator> >
{
  static const char* value()
  {
    return "artag_location/AT_Message";
  }

  static const char* value(const ::artag_location::AT_Message_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::artag_location::AT_Message_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 tran_x\n\
float64 tran_y\n\
string reached\n\
";
  }

  static const char* value(const ::artag_location::AT_Message_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::artag_location::AT_Message_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.tran_x);
      stream.next(m.tran_y);
      stream.next(m.reached);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AT_Message_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::artag_location::AT_Message_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::artag_location::AT_Message_<ContainerAllocator>& v)
  {
    s << indent << "tran_x: ";
    Printer<double>::stream(s, indent + "  ", v.tran_x);
    s << indent << "tran_y: ";
    Printer<double>::stream(s, indent + "  ", v.tran_y);
    s << indent << "reached: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.reached);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARTAG_LOCATION_MESSAGE_AT_MESSAGE_H
